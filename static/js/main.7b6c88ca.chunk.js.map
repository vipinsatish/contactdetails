{"version":3,"sources":["logo.svg","Menu.js","About.js","Form.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","to","About","initialState","name","email","phone","password","nameError","emailError","passwordError","phoneError","Form","state","handleChange","event","isCheckbox","target","type","setState","checked","value","validate","includes","handleSubmit","preventDefault","console","log","onSubmit","this","placeholder","onChange","style","fontSize","color","React","Component","Contact","Home","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b6c88ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./Menustyle.css\";\r\nimport {Link} from \"react-router-dom\"\r\nconst Menu=()=>{\r\n    return(\r\n        <div className=\"Menustyle\">\r\n            <ul>\r\n                <li><Link to=\"/\"> Home</Link> </li>\r\n                <li><Link to=\"About\">About</Link> </li>\r\n                <li><Link to=\"Contact\"> Contact</Link></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React from \"react\";\r\nimport \"./Aboutstyle.css\";\r\nconst About=()=>{\r\n    return(\r\n        <div className=\"Aboutstyle\">\r\n            <h2>Welcome to About Us Page</h2>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default About;","import React, { Component } from 'react';\r\nimport './Form.css';\r\n\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  email: \"\",\r\n  phone: \"\",\r\n  password: \"\",\r\n  nameError: \"\",\r\n  emailError: \"\",\r\n  passwordError: \"\",\r\n  phoneError:\"\"\r\n\r\n};\r\n\r\nclass Form extends React.Component {\r\n  state = initialState;\r\n\r\n  handleChange = event => {\r\n    const isCheckbox = event.target.type === \"checkbox\";\r\n    this.setState({\r\n      [event.target.name]: isCheckbox\r\n        ? event.target.checked\r\n        : event.target.value\r\n    });\r\n  };\r\n\r\n  validate = () => {\r\n    let nameError = \"\";\r\n    let emailError = \"\";\r\n    let phoneError =\"\";\r\n    let passwordError = \"\";\r\n\r\n    if (!this.state.name) {\r\n      nameError = \"Name cannot be blank\";\r\n    }\r\n\r\n    if (!(this.state.email.includes(\"@\")&&this.state.email.includes(\".com\"))) {\r\n      emailError = \"Invalid email\";\r\n    }\r\n\r\n    if (!this.state.phone) {\r\n        phoneError = \"Phone cannot be blank\";\r\n      }\r\n\r\n    if (emailError || nameError || phoneError||passwordError) {\r\n      this.setState({ emailError, nameError,phoneError });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const isValid = this.validate();\r\n    if (isValid) {\r\n      console.log(this.state);\r\n      // clear form\r\n      this.setState(initialState);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div>\r\n          <input\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div style={{ fontSize: 12, color: \"red\" }}>\r\n            {this.state.nameError}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <input\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n            value={this.state.email}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div style={{ fontSize: 12, color: \"red\" }}>\r\n            {this.state.emailError}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n            value={this.state.password}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div style={{ fontSize: 12, color: \"red\" }}>\r\n            {this.state.passwordError}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <input\r\n            type=\"phone\"\r\n            name=\"phone\"\r\n            placeholder=\"phone\"\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n          />\r\n          <div style={{ fontSize: 12, color: \"red\" }}>\r\n            {this.state.phoneError}\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\">submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Form;","import React from \"react\";\r\nimport Form from \"./Form\"\r\nimport \"./Contactstyle.css\";\r\nconst Contact=()=>{\r\n    return(\r\n        <div className=\"Contactstyle\">\r\n           \r\n            <br/>\r\n            <Form/>\r\n        </div>\r\n    )\r\n}\r\nexport default Contact;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Menu from './Menu';\nimport About from \"./About\";\nimport Contact from \"./Contact\";\nimport {BrowserRouter,Route,Switch} from \"react-router-dom\";\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div>\n      <Menu/>\n      <Switch>\n      <Route path=\"/\" component={Contact}/>\n      <Route path=\"/Home\" exact component={Home}/>\n      <Route path=\"/About\" component={About}/>\n       \n      </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\nconst Home=()=>{\n  return(\n      <div className=\"Contactstyle\">\n          <h2> Welcome to Home page. </h2>\n\n      </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}